#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyPhongNet.DAO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyPhongNet")]
	public partial class QuanLyPhongNETDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAfterPayClient(AfterPayClient instance);
    partial void UpdateAfterPayClient(AfterPayClient instance);
    partial void DeleteAfterPayClient(AfterPayClient instance);
    partial void InsertBANBE(BANBE instance);
    partial void UpdateBANBE(BANBE instance);
    partial void DeleteBANBE(BANBE instance);
    partial void InsertBeforePayClient(BeforePayClient instance);
    partial void UpdateBeforePayClient(BeforePayClient instance);
    partial void DeleteBeforePayClient(BeforePayClient instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertDOITUONG(DOITUONG instance);
    partial void UpdateDOITUONG(DOITUONG instance);
    partial void DeleteDOITUONG(DOITUONG instance);
    partial void InsertDrink(Drink instance);
    partial void UpdateDrink(Drink instance);
    partial void DeleteDrink(Drink instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertGIADINH(GIADINH instance);
    partial void UpdateGIADINH(GIADINH instance);
    partial void DeleteGIADINH(GIADINH instance);
    partial void InsertGIAODICH(GIAODICH instance);
    partial void UpdateGIAODICH(GIAODICH instance);
    partial void DeleteGIAODICH(GIAODICH instance);
    partial void InsertGIAOTIEP(GIAOTIEP instance);
    partial void UpdateGIAOTIEP(GIAOTIEP instance);
    partial void DeleteGIAOTIEP(GIAOTIEP instance);
    partial void InsertGroupClient(GroupClient instance);
    partial void UpdateGroupClient(GroupClient instance);
    partial void DeleteGroupClient(GroupClient instance);
    partial void InsertGroupClientAndGroupUser(GroupClientAndGroupUser instance);
    partial void UpdateGroupClientAndGroupUser(GroupClientAndGroupUser instance);
    partial void DeleteGroupClientAndGroupUser(GroupClientAndGroupUser instance);
    partial void InsertGroupUser(GroupUser instance);
    partial void UpdateGroupUser(GroupUser instance);
    partial void DeleteGroupUser(GroupUser instance);
    partial void InsertLINHVUC(LINHVUC instance);
    partial void UpdateLINHVUC(LINHVUC instance);
    partial void DeleteLINHVUC(LINHVUC instance);
    partial void InsertLOAIGAME(LOAIGAME instance);
    partial void UpdateLOAIGAME(LOAIGAME instance);
    partial void DeleteLOAIGAME(LOAIGAME instance);
    partial void InsertLOAITHE(LOAITHE instance);
    partial void UpdateLOAITHE(LOAITHE instance);
    partial void DeleteLOAITHE(LOAITHE instance);
    partial void InsertLoginMember(LoginMember instance);
    partial void UpdateLoginMember(LoginMember instance);
    partial void DeleteLoginMember(LoginMember instance);
    partial void InsertLUONG(LUONG instance);
    partial void UpdateLUONG(LUONG instance);
    partial void DeleteLUONG(LUONG instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMemberInformation(MemberInformation instance);
    partial void UpdateMemberInformation(MemberInformation instance);
    partial void DeleteMemberInformation(MemberInformation instance);
    partial void InsertNGUOIDUNG(NGUOIDUNG instance);
    partial void UpdateNGUOIDUNG(NGUOIDUNG instance);
    partial void DeleteNGUOIDUNG(NGUOIDUNG instance);
    partial void InsertOrderCard(OrderCard instance);
    partial void UpdateOrderCard(OrderCard instance);
    partial void DeleteOrderCard(OrderCard instance);
    partial void InsertOrderDrink(OrderDrink instance);
    partial void UpdateOrderDrink(OrderDrink instance);
    partial void DeleteOrderDrink(OrderDrink instance);
    partial void InsertOrderFood(OrderFood instance);
    partial void UpdateOrderFood(OrderFood instance);
    partial void DeleteOrderFood(OrderFood instance);
    partial void InsertTHAMSO(THAMSO instance);
    partial void UpdateTHAMSO(THAMSO instance);
    partial void DeleteTHAMSO(THAMSO instance);
    partial void InsertTHANHVIEN(THANHVIEN instance);
    partial void UpdateTHANHVIEN(THANHVIEN instance);
    partial void DeleteTHANHVIEN(THANHVIEN instance);
    partial void InsertTheCard(TheCard instance);
    partial void UpdateTheCard(TheCard instance);
    partial void DeleteTheCard(TheCard instance);
    partial void InsertTheUser(TheUser instance);
    partial void UpdateTheUser(TheUser instance);
    partial void DeleteTheUser(TheUser instance);
    partial void InsertTHUNHAP(THUNHAP instance);
    partial void UpdateTHUNHAP(THUNHAP instance);
    partial void DeleteTHUNHAP(THUNHAP instance);
    partial void InsertTRAIGAI(TRAIGAI instance);
    partial void UpdateTRAIGAI(TRAIGAI instance);
    partial void DeleteTRAIGAI(TRAIGAI instance);
    #endregion
		
		public QuanLyPhongNETDataContext() : 
				base(global::QuanLyPhongNet.DAO.Properties.Settings.Default.QuanLyPhongNetConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyPhongNETDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyPhongNETDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyPhongNETDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyPhongNETDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AfterPayClient> AfterPayClients
		{
			get
			{
				return this.GetTable<AfterPayClient>();
			}
		}
		
		public System.Data.Linq.Table<TransactionDiary> TransactionDiaries
		{
			get
			{
				return this.GetTable<TransactionDiary>();
			}
		}
		
		public System.Data.Linq.Table<BANBE> BANBEs
		{
			get
			{
				return this.GetTable<BANBE>();
			}
		}
		
		public System.Data.Linq.Table<BANTIN> BANTINs
		{
			get
			{
				return this.GetTable<BANTIN>();
			}
		}
		
		public System.Data.Linq.Table<BeforePayClient> BeforePayClients
		{
			get
			{
				return this.GetTable<BeforePayClient>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<DOITUONG> DOITUONGs
		{
			get
			{
				return this.GetTable<DOITUONG>();
			}
		}
		
		public System.Data.Linq.Table<Drink> Drinks
		{
			get
			{
				return this.GetTable<Drink>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<GIADINH> GIADINHs
		{
			get
			{
				return this.GetTable<GIADINH>();
			}
		}
		
		public System.Data.Linq.Table<GIAODICH> GIAODICHes
		{
			get
			{
				return this.GetTable<GIAODICH>();
			}
		}
		
		public System.Data.Linq.Table<GIAOTIEP> GIAOTIEPs
		{
			get
			{
				return this.GetTable<GIAOTIEP>();
			}
		}
		
		public System.Data.Linq.Table<GroupClient> GroupClients
		{
			get
			{
				return this.GetTable<GroupClient>();
			}
		}
		
		public System.Data.Linq.Table<GroupClientAndGroupUser> GroupClientAndGroupUsers
		{
			get
			{
				return this.GetTable<GroupClientAndGroupUser>();
			}
		}
		
		public System.Data.Linq.Table<GroupUser> GroupUsers
		{
			get
			{
				return this.GetTable<GroupUser>();
			}
		}
		
		public System.Data.Linq.Table<LINHVUC> LINHVUCs
		{
			get
			{
				return this.GetTable<LINHVUC>();
			}
		}
		
		public System.Data.Linq.Table<LOAIGAME> LOAIGAMEs
		{
			get
			{
				return this.GetTable<LOAIGAME>();
			}
		}
		
		public System.Data.Linq.Table<LOAITHE> LOAITHEs
		{
			get
			{
				return this.GetTable<LOAITHE>();
			}
		}
		
		public System.Data.Linq.Table<LoginMember> LoginMembers
		{
			get
			{
				return this.GetTable<LoginMember>();
			}
		}
		
		public System.Data.Linq.Table<LUONG> LUONGs
		{
			get
			{
				return this.GetTable<LUONG>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<MemberInformation> MemberInformations
		{
			get
			{
				return this.GetTable<MemberInformation>();
			}
		}
		
		public System.Data.Linq.Table<NGUOIDUNG> NGUOIDUNGs
		{
			get
			{
				return this.GetTable<NGUOIDUNG>();
			}
		}
		
		public System.Data.Linq.Table<OrderCard> OrderCards
		{
			get
			{
				return this.GetTable<OrderCard>();
			}
		}
		
		public System.Data.Linq.Table<OrderDrink> OrderDrinks
		{
			get
			{
				return this.GetTable<OrderDrink>();
			}
		}
		
		public System.Data.Linq.Table<OrderFood> OrderFoods
		{
			get
			{
				return this.GetTable<OrderFood>();
			}
		}
		
		public System.Data.Linq.Table<THAMSO> THAMSOs
		{
			get
			{
				return this.GetTable<THAMSO>();
			}
		}
		
		public System.Data.Linq.Table<THANHVIEN> THANHVIENs
		{
			get
			{
				return this.GetTable<THANHVIEN>();
			}
		}
		
		public System.Data.Linq.Table<TheCard> TheCards
		{
			get
			{
				return this.GetTable<TheCard>();
			}
		}
		
		public System.Data.Linq.Table<TheUser> TheUsers
		{
			get
			{
				return this.GetTable<TheUser>();
			}
		}
		
		public System.Data.Linq.Table<THUNHAP> THUNHAPs
		{
			get
			{
				return this.GetTable<THUNHAP>();
			}
		}
		
		public System.Data.Linq.Table<TRAIGAI> TRAIGAIs
		{
			get
			{
				return this.GetTable<TRAIGAI>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AfterPayClient")]
	public partial class AfterPayClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _BillID;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _UseTime;
		
		private System.Nullable<double> _PriceUnit;
		
		private System.Nullable<double> _TotalMoney;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnBillIDChanging(int value);
    partial void OnBillIDChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnUseTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnUseTimeChanged();
    partial void OnPriceUnitChanging(System.Nullable<double> value);
    partial void OnPriceUnitChanged();
    partial void OnTotalMoneyChanging(System.Nullable<double> value);
    partial void OnTotalMoneyChanged();
    #endregion
		
		public AfterPayClient()
		{
			this._Bill = default(EntityRef<Bill>);
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this.OnUseTimeChanging(value);
					this.SendPropertyChanging();
					this._UseTime = value;
					this.SendPropertyChanged("UseTime");
					this.OnUseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Float")]
		public System.Nullable<double> PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMoney", DbType="Float")]
		public System.Nullable<double> TotalMoney
		{
			get
			{
				return this._TotalMoney;
			}
			set
			{
				if ((this._TotalMoney != value))
				{
					this.OnTotalMoneyChanging(value);
					this.SendPropertyChanging();
					this._TotalMoney = value;
					this.SendPropertyChanged("TotalMoney");
					this.OnTotalMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_AfterPayClient", Storage="_Bill", ThisKey="BillID", OtherKey="BillID", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.AfterPayClients.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.AfterPayClients.Add(this);
						this._BillID = value.BillID;
					}
					else
					{
						this._BillID = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AfterPayClient", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.AfterPayClients.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.AfterPayClients.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionDiary")]
	public partial class TransactionDiary
	{
		
		private string _UserName;
		
		private System.Nullable<int> _memberID;
		
		private System.Nullable<System.DateTime> _TransacDate;
		
		private System.Nullable<System.TimeSpan> _AddTime;
		
		private System.Nullable<double> _AddMoney;
		
		private System.Nullable<System.TimeSpan> _UseTime;
		
		private string _Note;
		
		public TransactionDiary()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(60)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberID", DbType="Int")]
		public System.Nullable<int> memberID
		{
			get
			{
				return this._memberID;
			}
			set
			{
				if ((this._memberID != value))
				{
					this._memberID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransacDate", DbType="Date")]
		public System.Nullable<System.DateTime> TransacDate
		{
			get
			{
				return this._TransacDate;
			}
			set
			{
				if ((this._TransacDate != value))
				{
					this._TransacDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this._AddTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddMoney", DbType="Float")]
		public System.Nullable<double> AddMoney
		{
			get
			{
				return this._AddMoney;
			}
			set
			{
				if ((this._AddMoney != value))
				{
					this._AddMoney = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this._UseTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(120)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this._Note = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BANBE")]
	public partial class BANBE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MABANBE;
		
		private string _TENBANBE;
		
		private string _SOTHICH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMABANBEChanging(string value);
    partial void OnMABANBEChanged();
    partial void OnTENBANBEChanging(string value);
    partial void OnTENBANBEChanged();
    partial void OnSOTHICHChanging(string value);
    partial void OnSOTHICHChanged();
    #endregion
		
		public BANBE()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MABANBE", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MABANBE
		{
			get
			{
				return this._MABANBE;
			}
			set
			{
				if ((this._MABANBE != value))
				{
					this.OnMABANBEChanging(value);
					this.SendPropertyChanging();
					this._MABANBE = value;
					this.SendPropertyChanged("MABANBE");
					this.OnMABANBEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENBANBE", DbType="NVarChar(50)")]
		public string TENBANBE
		{
			get
			{
				return this._TENBANBE;
			}
			set
			{
				if ((this._TENBANBE != value))
				{
					this.OnTENBANBEChanging(value);
					this.SendPropertyChanging();
					this._TENBANBE = value;
					this.SendPropertyChanged("TENBANBE");
					this.OnTENBANBEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOTHICH", DbType="NVarChar(90)")]
		public string SOTHICH
		{
			get
			{
				return this._SOTHICH;
			}
			set
			{
				if ((this._SOTHICH != value))
				{
					this.OnSOTHICHChanging(value);
					this.SendPropertyChanging();
					this._SOTHICH = value;
					this.SendPropertyChanged("SOTHICH");
					this.OnSOTHICHChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BANTIN")]
	public partial class BANTIN
	{
		
		private int _MABANTIN;
		
		private string _MALINHVUC;
		
		private string _TIEUDE;
		
		private string _TOMTAT;
		
		private string _NOIDUNG;
		
		private System.Nullable<System.DateTime> _NGAYDANGTIN;
		
		private string _HINHANH;
		
		private string _CHUTHICHANH;
		
		public BANTIN()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MABANTIN", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int MABANTIN
		{
			get
			{
				return this._MABANTIN;
			}
			set
			{
				if ((this._MABANTIN != value))
				{
					this._MABANTIN = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALINHVUC", DbType="NVarChar(2)")]
		public string MALINHVUC
		{
			get
			{
				return this._MALINHVUC;
			}
			set
			{
				if ((this._MALINHVUC != value))
				{
					this._MALINHVUC = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TIEUDE", DbType="NVarChar(200)")]
		public string TIEUDE
		{
			get
			{
				return this._TIEUDE;
			}
			set
			{
				if ((this._TIEUDE != value))
				{
					this._TIEUDE = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOMTAT", DbType="NVarChar(500)")]
		public string TOMTAT
		{
			get
			{
				return this._TOMTAT;
			}
			set
			{
				if ((this._TOMTAT != value))
				{
					this._TOMTAT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOIDUNG", DbType="NVarChar(4000)")]
		public string NOIDUNG
		{
			get
			{
				return this._NOIDUNG;
			}
			set
			{
				if ((this._NOIDUNG != value))
				{
					this._NOIDUNG = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYDANGTIN", DbType="DateTime")]
		public System.Nullable<System.DateTime> NGAYDANGTIN
		{
			get
			{
				return this._NGAYDANGTIN;
			}
			set
			{
				if ((this._NGAYDANGTIN != value))
				{
					this._NGAYDANGTIN = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HINHANH", DbType="NVarChar(100)")]
		public string HINHANH
		{
			get
			{
				return this._HINHANH;
			}
			set
			{
				if ((this._HINHANH != value))
				{
					this._HINHANH = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHUTHICHANH", DbType="NVarChar(200)")]
		public string CHUTHICHANH
		{
			get
			{
				return this._CHUTHICHANH;
			}
			set
			{
				if ((this._CHUTHICHANH != value))
				{
					this._CHUTHICHANH = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeforePayClient")]
	public partial class BeforePayClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _BillID;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _UseTime;
		
		private System.Nullable<System.TimeSpan> _LeftTime;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnBillIDChanging(int value);
    partial void OnBillIDChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnUseTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnUseTimeChanged();
    partial void OnLeftTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnLeftTimeChanged();
    #endregion
		
		public BeforePayClient()
		{
			this._Bill = default(EntityRef<Bill>);
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this.OnUseTimeChanging(value);
					this.SendPropertyChanging();
					this._UseTime = value;
					this.SendPropertyChanged("UseTime");
					this.OnUseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> LeftTime
		{
			get
			{
				return this._LeftTime;
			}
			set
			{
				if ((this._LeftTime != value))
				{
					this.OnLeftTimeChanging(value);
					this.SendPropertyChanging();
					this._LeftTime = value;
					this.SendPropertyChanged("LeftTime");
					this.OnLeftTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BeforePayClient", Storage="_Bill", ThisKey="BillID", OtherKey="BillID", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.BeforePayClients.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.BeforePayClients.Add(this);
						this._BillID = value.BillID;
					}
					else
					{
						this._BillID = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_BeforePayClient", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.BeforePayClients.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.BeforePayClients.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillID;
		
		private string _FoundedUser;
		
		private System.Nullable<System.DateTime> _FoundedDate;
		
		private System.Nullable<double> _PriceTotal;
		
		private EntitySet<AfterPayClient> _AfterPayClients;
		
		private EntitySet<BeforePayClient> _BeforePayClients;
		
		private EntityRef<TheUser> _TheUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillIDChanging(int value);
    partial void OnBillIDChanged();
    partial void OnFoundedUserChanging(string value);
    partial void OnFoundedUserChanged();
    partial void OnFoundedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFoundedDateChanged();
    partial void OnPriceTotalChanging(System.Nullable<double> value);
    partial void OnPriceTotalChanged();
    #endregion
		
		public Bill()
		{
			this._AfterPayClients = new EntitySet<AfterPayClient>(new Action<AfterPayClient>(this.attach_AfterPayClients), new Action<AfterPayClient>(this.detach_AfterPayClients));
			this._BeforePayClients = new EntitySet<BeforePayClient>(new Action<BeforePayClient>(this.attach_BeforePayClients), new Action<BeforePayClient>(this.detach_BeforePayClients));
			this._TheUser = default(EntityRef<TheUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundedUser", DbType="NVarChar(60)")]
		public string FoundedUser
		{
			get
			{
				return this._FoundedUser;
			}
			set
			{
				if ((this._FoundedUser != value))
				{
					if (this._TheUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoundedUserChanging(value);
					this.SendPropertyChanging();
					this._FoundedUser = value;
					this.SendPropertyChanged("FoundedUser");
					this.OnFoundedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundedDate", DbType="Date")]
		public System.Nullable<System.DateTime> FoundedDate
		{
			get
			{
				return this._FoundedDate;
			}
			set
			{
				if ((this._FoundedDate != value))
				{
					this.OnFoundedDateChanging(value);
					this.SendPropertyChanging();
					this._FoundedDate = value;
					this.SendPropertyChanged("FoundedDate");
					this.OnFoundedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTotal", DbType="Float")]
		public System.Nullable<double> PriceTotal
		{
			get
			{
				return this._PriceTotal;
			}
			set
			{
				if ((this._PriceTotal != value))
				{
					this.OnPriceTotalChanging(value);
					this.SendPropertyChanging();
					this._PriceTotal = value;
					this.SendPropertyChanged("PriceTotal");
					this.OnPriceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_AfterPayClient", Storage="_AfterPayClients", ThisKey="BillID", OtherKey="BillID")]
		public EntitySet<AfterPayClient> AfterPayClients
		{
			get
			{
				return this._AfterPayClients;
			}
			set
			{
				this._AfterPayClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BeforePayClient", Storage="_BeforePayClients", ThisKey="BillID", OtherKey="BillID")]
		public EntitySet<BeforePayClient> BeforePayClients
		{
			get
			{
				return this._BeforePayClients;
			}
			set
			{
				this._BeforePayClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheUser_Bill", Storage="_TheUser", ThisKey="FoundedUser", OtherKey="UserName", IsForeignKey=true)]
		public TheUser TheUser
		{
			get
			{
				return this._TheUser.Entity;
			}
			set
			{
				TheUser previousValue = this._TheUser.Entity;
				if (((previousValue != value) 
							|| (this._TheUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TheUser.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._TheUser.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._FoundedUser = value.UserName;
					}
					else
					{
						this._FoundedUser = default(string);
					}
					this.SendPropertyChanged("TheUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AfterPayClients(AfterPayClient entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_AfterPayClients(AfterPayClient entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
		
		private void attach_BeforePayClients(BeforePayClient entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_BeforePayClients(BeforePayClient entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CategoryName;
		
		private EntitySet<Drink> _Drinks;
		
		private EntitySet<Food> _Foods;
		
		private EntitySet<TheCard> _TheCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._Drinks = new EntitySet<Drink>(new Action<Drink>(this.attach_Drinks), new Action<Drink>(this.detach_Drinks));
			this._Foods = new EntitySet<Food>(new Action<Food>(this.attach_Foods), new Action<Food>(this.detach_Foods));
			this._TheCards = new EntitySet<TheCard>(new Action<TheCard>(this.attach_TheCards), new Action<TheCard>(this.detach_TheCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(60) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Drink", Storage="_Drinks", ThisKey="CategoryName", OtherKey="CategoryName")]
		public EntitySet<Drink> Drinks
		{
			get
			{
				return this._Drinks;
			}
			set
			{
				this._Drinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Food", Storage="_Foods", ThisKey="CategoryName", OtherKey="CategoryName")]
		public EntitySet<Food> Foods
		{
			get
			{
				return this._Foods;
			}
			set
			{
				this._Foods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_TheCard", Storage="_TheCards", ThisKey="CategoryName", OtherKey="CategoryName")]
		public EntitySet<TheCard> TheCards
		{
			get
			{
				return this._TheCards;
			}
			set
			{
				this._TheCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_TheCards(TheCard entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_TheCards(TheCard entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private string _GroupClientName;
		
		private string _StatusClient;
		
		private string _Note;
		
		private EntitySet<AfterPayClient> _AfterPayClients;
		
		private EntitySet<BeforePayClient> _BeforePayClients;
		
		private EntitySet<LoginMember> _LoginMembers;
		
		private EntitySet<OrderCard> _OrderCards;
		
		private EntitySet<OrderDrink> _OrderDrinks;
		
		private EntitySet<OrderFood> _OrderFoods;
		
		private EntityRef<GroupClient> _GroupClient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnGroupClientNameChanging(string value);
    partial void OnGroupClientNameChanged();
    partial void OnStatusClientChanging(string value);
    partial void OnStatusClientChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Client()
		{
			this._AfterPayClients = new EntitySet<AfterPayClient>(new Action<AfterPayClient>(this.attach_AfterPayClients), new Action<AfterPayClient>(this.detach_AfterPayClients));
			this._BeforePayClients = new EntitySet<BeforePayClient>(new Action<BeforePayClient>(this.attach_BeforePayClients), new Action<BeforePayClient>(this.detach_BeforePayClients));
			this._LoginMembers = new EntitySet<LoginMember>(new Action<LoginMember>(this.attach_LoginMembers), new Action<LoginMember>(this.detach_LoginMembers));
			this._OrderCards = new EntitySet<OrderCard>(new Action<OrderCard>(this.attach_OrderCards), new Action<OrderCard>(this.detach_OrderCards));
			this._OrderDrinks = new EntitySet<OrderDrink>(new Action<OrderDrink>(this.attach_OrderDrinks), new Action<OrderDrink>(this.detach_OrderDrinks));
			this._OrderFoods = new EntitySet<OrderFood>(new Action<OrderFood>(this.attach_OrderFoods), new Action<OrderFood>(this.detach_OrderFoods));
			this._GroupClient = default(EntityRef<GroupClient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupClientName", DbType="NVarChar(30)")]
		public string GroupClientName
		{
			get
			{
				return this._GroupClientName;
			}
			set
			{
				if ((this._GroupClientName != value))
				{
					if (this._GroupClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupClientNameChanging(value);
					this.SendPropertyChanging();
					this._GroupClientName = value;
					this.SendPropertyChanged("GroupClientName");
					this.OnGroupClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusClient", DbType="VarChar(50)")]
		public string StatusClient
		{
			get
			{
				return this._StatusClient;
			}
			set
			{
				if ((this._StatusClient != value))
				{
					this.OnStatusClientChanging(value);
					this.SendPropertyChanging();
					this._StatusClient = value;
					this.SendPropertyChanged("StatusClient");
					this.OnStatusClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(100)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_AfterPayClient", Storage="_AfterPayClients", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<AfterPayClient> AfterPayClients
		{
			get
			{
				return this._AfterPayClients;
			}
			set
			{
				this._AfterPayClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_BeforePayClient", Storage="_BeforePayClients", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<BeforePayClient> BeforePayClients
		{
			get
			{
				return this._BeforePayClients;
			}
			set
			{
				this._BeforePayClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_LoginMember", Storage="_LoginMembers", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<LoginMember> LoginMembers
		{
			get
			{
				return this._LoginMembers;
			}
			set
			{
				this._LoginMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderCard", Storage="_OrderCards", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<OrderCard> OrderCards
		{
			get
			{
				return this._OrderCards;
			}
			set
			{
				this._OrderCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderDrink", Storage="_OrderDrinks", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<OrderDrink> OrderDrinks
		{
			get
			{
				return this._OrderDrinks;
			}
			set
			{
				this._OrderDrinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderFood", Storage="_OrderFoods", ThisKey="ClientName", OtherKey="ClientName")]
		public EntitySet<OrderFood> OrderFoods
		{
			get
			{
				return this._OrderFoods;
			}
			set
			{
				this._OrderFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupClient_Client", Storage="_GroupClient", ThisKey="GroupClientName", OtherKey="GroupName", IsForeignKey=true)]
		public GroupClient GroupClient
		{
			get
			{
				return this._GroupClient.Entity;
			}
			set
			{
				GroupClient previousValue = this._GroupClient.Entity;
				if (((previousValue != value) 
							|| (this._GroupClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupClient.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._GroupClient.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._GroupClientName = value.GroupName;
					}
					else
					{
						this._GroupClientName = default(string);
					}
					this.SendPropertyChanged("GroupClient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AfterPayClients(AfterPayClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_AfterPayClients(AfterPayClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_BeforePayClients(BeforePayClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_BeforePayClients(BeforePayClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_LoginMembers(LoginMember entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_LoginMembers(LoginMember entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_OrderCards(OrderCard entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_OrderCards(OrderCard entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_OrderFoods(OrderFood entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_OrderFoods(OrderFood entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DOITUONG")]
	public partial class DOITUONG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MADOITUONG;
		
		private string _TENDOITUONG;
		
		private string _CHITIETDOITUONG;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMADOITUONGChanging(string value);
    partial void OnMADOITUONGChanged();
    partial void OnTENDOITUONGChanging(string value);
    partial void OnTENDOITUONGChanged();
    partial void OnCHITIETDOITUONGChanging(string value);
    partial void OnCHITIETDOITUONGChanged();
    #endregion
		
		public DOITUONG()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MADOITUONG", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MADOITUONG
		{
			get
			{
				return this._MADOITUONG;
			}
			set
			{
				if ((this._MADOITUONG != value))
				{
					this.OnMADOITUONGChanging(value);
					this.SendPropertyChanging();
					this._MADOITUONG = value;
					this.SendPropertyChanged("MADOITUONG");
					this.OnMADOITUONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENDOITUONG", DbType="NVarChar(50)")]
		public string TENDOITUONG
		{
			get
			{
				return this._TENDOITUONG;
			}
			set
			{
				if ((this._TENDOITUONG != value))
				{
					this.OnTENDOITUONGChanging(value);
					this.SendPropertyChanging();
					this._TENDOITUONG = value;
					this.SendPropertyChanged("TENDOITUONG");
					this.OnTENDOITUONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHITIETDOITUONG", DbType="NVarChar(90)")]
		public string CHITIETDOITUONG
		{
			get
			{
				return this._CHITIETDOITUONG;
			}
			set
			{
				if ((this._CHITIETDOITUONG != value))
				{
					this.OnCHITIETDOITUONGChanging(value);
					this.SendPropertyChanging();
					this._CHITIETDOITUONG = value;
					this.SendPropertyChanged("CHITIETDOITUONG");
					this.OnCHITIETDOITUONGChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drink")]
	public partial class Drink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrinkID;
		
		private string _DrinkName;
		
		private string _CategoryName;
		
		private System.Nullable<double> _PriceUnit;
		
		private string _UnitLot;
		
		private System.Nullable<int> _InventoryNumber;
		
		private EntitySet<OrderDrink> _OrderDrinks;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrinkIDChanging(int value);
    partial void OnDrinkIDChanged();
    partial void OnDrinkNameChanging(string value);
    partial void OnDrinkNameChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnPriceUnitChanging(System.Nullable<double> value);
    partial void OnPriceUnitChanged();
    partial void OnUnitLotChanging(string value);
    partial void OnUnitLotChanged();
    partial void OnInventoryNumberChanging(System.Nullable<int> value);
    partial void OnInventoryNumberChanged();
    #endregion
		
		public Drink()
		{
			this._OrderDrinks = new EntitySet<OrderDrink>(new Action<OrderDrink>(this.attach_OrderDrinks), new Action<OrderDrink>(this.detach_OrderDrinks));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DrinkID
		{
			get
			{
				return this._DrinkID;
			}
			set
			{
				if ((this._DrinkID != value))
				{
					this.OnDrinkIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkID = value;
					this.SendPropertyChanged("DrinkID");
					this.OnDrinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkName", DbType="NVarChar(100)")]
		public string DrinkName
		{
			get
			{
				return this._DrinkName;
			}
			set
			{
				if ((this._DrinkName != value))
				{
					this.OnDrinkNameChanging(value);
					this.SendPropertyChanging();
					this._DrinkName = value;
					this.SendPropertyChanged("DrinkName");
					this.OnDrinkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(60)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Float")]
		public System.Nullable<double> PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitLot", DbType="NVarChar(100)")]
		public string UnitLot
		{
			get
			{
				return this._UnitLot;
			}
			set
			{
				if ((this._UnitLot != value))
				{
					this.OnUnitLotChanging(value);
					this.SendPropertyChanging();
					this._UnitLot = value;
					this.SendPropertyChanged("UnitLot");
					this.OnUnitLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryNumber", DbType="Int")]
		public System.Nullable<int> InventoryNumber
		{
			get
			{
				return this._InventoryNumber;
			}
			set
			{
				if ((this._InventoryNumber != value))
				{
					this.OnInventoryNumberChanging(value);
					this.SendPropertyChanging();
					this._InventoryNumber = value;
					this.SendPropertyChanged("InventoryNumber");
					this.OnInventoryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_OrderDrink", Storage="_OrderDrinks", ThisKey="DrinkID", OtherKey="DrinkID")]
		public EntitySet<OrderDrink> OrderDrinks
		{
			get
			{
				return this._OrderDrinks;
			}
			set
			{
				this._OrderDrinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Drink", Storage="_Category", ThisKey="CategoryName", OtherKey="CategoryName", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Drinks.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Drinks.Add(this);
						this._CategoryName = value.CategoryName;
					}
					else
					{
						this._CategoryName = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Drink = this;
		}
		
		private void detach_OrderDrinks(OrderDrink entity)
		{
			this.SendPropertyChanging();
			entity.Drink = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FoodID;
		
		private string _FoodName;
		
		private string _CategoryName;
		
		private System.Nullable<double> _PriceUnit;
		
		private string _UnitLot;
		
		private System.Nullable<int> _InventoryNumber;
		
		private EntitySet<OrderFood> _OrderFoods;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodIDChanging(int value);
    partial void OnFoodIDChanged();
    partial void OnFoodNameChanging(string value);
    partial void OnFoodNameChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnPriceUnitChanging(System.Nullable<double> value);
    partial void OnPriceUnitChanged();
    partial void OnUnitLotChanging(string value);
    partial void OnUnitLotChanged();
    partial void OnInventoryNumberChanging(System.Nullable<int> value);
    partial void OnInventoryNumberChanged();
    #endregion
		
		public Food()
		{
			this._OrderFoods = new EntitySet<OrderFood>(new Action<OrderFood>(this.attach_OrderFoods), new Action<OrderFood>(this.detach_OrderFoods));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					this.OnFoodIDChanging(value);
					this.SendPropertyChanging();
					this._FoodID = value;
					this.SendPropertyChanged("FoodID");
					this.OnFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodName", DbType="NVarChar(100)")]
		public string FoodName
		{
			get
			{
				return this._FoodName;
			}
			set
			{
				if ((this._FoodName != value))
				{
					this.OnFoodNameChanging(value);
					this.SendPropertyChanging();
					this._FoodName = value;
					this.SendPropertyChanged("FoodName");
					this.OnFoodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(60)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Float")]
		public System.Nullable<double> PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitLot", DbType="NVarChar(100)")]
		public string UnitLot
		{
			get
			{
				return this._UnitLot;
			}
			set
			{
				if ((this._UnitLot != value))
				{
					this.OnUnitLotChanging(value);
					this.SendPropertyChanging();
					this._UnitLot = value;
					this.SendPropertyChanged("UnitLot");
					this.OnUnitLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryNumber", DbType="Int")]
		public System.Nullable<int> InventoryNumber
		{
			get
			{
				return this._InventoryNumber;
			}
			set
			{
				if ((this._InventoryNumber != value))
				{
					this.OnInventoryNumberChanging(value);
					this.SendPropertyChanging();
					this._InventoryNumber = value;
					this.SendPropertyChanged("InventoryNumber");
					this.OnInventoryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_OrderFood", Storage="_OrderFoods", ThisKey="FoodID", OtherKey="FoodID")]
		public EntitySet<OrderFood> OrderFoods
		{
			get
			{
				return this._OrderFoods;
			}
			set
			{
				this._OrderFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Food", Storage="_Category", ThisKey="CategoryName", OtherKey="CategoryName", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Foods.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Foods.Add(this);
						this._CategoryName = value.CategoryName;
					}
					else
					{
						this._CategoryName = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderFoods(OrderFood entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_OrderFoods(OrderFood entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GIADINH")]
	public partial class GIADINH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAGIADINH;
		
		private string _TENGIADINH;
		
		private string _CHITIETGIADINH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAGIADINHChanging(string value);
    partial void OnMAGIADINHChanged();
    partial void OnTENGIADINHChanging(string value);
    partial void OnTENGIADINHChanged();
    partial void OnCHITIETGIADINHChanging(string value);
    partial void OnCHITIETGIADINHChanged();
    #endregion
		
		public GIADINH()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAGIADINH", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAGIADINH
		{
			get
			{
				return this._MAGIADINH;
			}
			set
			{
				if ((this._MAGIADINH != value))
				{
					this.OnMAGIADINHChanging(value);
					this.SendPropertyChanging();
					this._MAGIADINH = value;
					this.SendPropertyChanged("MAGIADINH");
					this.OnMAGIADINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENGIADINH", DbType="NVarChar(50)")]
		public string TENGIADINH
		{
			get
			{
				return this._TENGIADINH;
			}
			set
			{
				if ((this._TENGIADINH != value))
				{
					this.OnTENGIADINHChanging(value);
					this.SendPropertyChanging();
					this._TENGIADINH = value;
					this.SendPropertyChanged("TENGIADINH");
					this.OnTENGIADINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHITIETGIADINH", DbType="NVarChar(90)")]
		public string CHITIETGIADINH
		{
			get
			{
				return this._CHITIETGIADINH;
			}
			set
			{
				if ((this._CHITIETGIADINH != value))
				{
					this.OnCHITIETGIADINHChanging(value);
					this.SendPropertyChanging();
					this._CHITIETGIADINH = value;
					this.SendPropertyChanged("CHITIETGIADINH");
					this.OnCHITIETGIADINHChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GIAODICH")]
	public partial class GIAODICH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAGIAODICH;
		
		private System.Nullable<System.DateTime> _NGAYTHANG;
		
		private string _MATV;
		
		private System.Nullable<long> _SOTIEN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAGIAODICHChanging(string value);
    partial void OnMAGIAODICHChanged();
    partial void OnNGAYTHANGChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYTHANGChanged();
    partial void OnMATVChanging(string value);
    partial void OnMATVChanged();
    partial void OnSOTIENChanging(System.Nullable<long> value);
    partial void OnSOTIENChanged();
    #endregion
		
		public GIAODICH()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAGIAODICH", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAGIAODICH
		{
			get
			{
				return this._MAGIAODICH;
			}
			set
			{
				if ((this._MAGIAODICH != value))
				{
					this.OnMAGIAODICHChanging(value);
					this.SendPropertyChanging();
					this._MAGIAODICH = value;
					this.SendPropertyChanged("MAGIAODICH");
					this.OnMAGIAODICHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYTHANG", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> NGAYTHANG
		{
			get
			{
				return this._NGAYTHANG;
			}
			set
			{
				if ((this._NGAYTHANG != value))
				{
					this.OnNGAYTHANGChanging(value);
					this.SendPropertyChanging();
					this._NGAYTHANG = value;
					this.SendPropertyChanged("NGAYTHANG");
					this.OnNGAYTHANGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MATV", DbType="NVarChar(90)")]
		public string MATV
		{
			get
			{
				return this._MATV;
			}
			set
			{
				if ((this._MATV != value))
				{
					this.OnMATVChanging(value);
					this.SendPropertyChanging();
					this._MATV = value;
					this.SendPropertyChanged("MATV");
					this.OnMATVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOTIEN", DbType="BigInt")]
		public System.Nullable<long> SOTIEN
		{
			get
			{
				return this._SOTIEN;
			}
			set
			{
				if ((this._SOTIEN != value))
				{
					this.OnSOTIENChanging(value);
					this.SendPropertyChanging();
					this._SOTIEN = value;
					this.SendPropertyChanged("SOTIEN");
					this.OnSOTIENChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GIAOTIEP")]
	public partial class GIAOTIEP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAGIAOTIEP;
		
		private string _TENGIAOTIEP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAGIAOTIEPChanging(string value);
    partial void OnMAGIAOTIEPChanged();
    partial void OnTENGIAOTIEPChanging(string value);
    partial void OnTENGIAOTIEPChanged();
    #endregion
		
		public GIAOTIEP()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAGIAOTIEP", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAGIAOTIEP
		{
			get
			{
				return this._MAGIAOTIEP;
			}
			set
			{
				if ((this._MAGIAOTIEP != value))
				{
					this.OnMAGIAOTIEPChanging(value);
					this.SendPropertyChanging();
					this._MAGIAOTIEP = value;
					this.SendPropertyChanged("MAGIAOTIEP");
					this.OnMAGIAOTIEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENGIAOTIEP", DbType="NVarChar(50)")]
		public string TENGIAOTIEP
		{
			get
			{
				return this._TENGIAOTIEP;
			}
			set
			{
				if ((this._TENGIAOTIEP != value))
				{
					this.OnTENGIAOTIEPChanging(value);
					this.SendPropertyChanging();
					this._TENGIAOTIEP = value;
					this.SendPropertyChanged("TENGIAOTIEP");
					this.OnTENGIAOTIEPChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupClient")]
	public partial class GroupClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupName;
		
		private string _Discription;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<GroupClientAndGroupUser> _GroupClientAndGroupUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    #endregion
		
		public GroupClient()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._GroupClientAndGroupUsers = new EntitySet<GroupClientAndGroupUser>(new Action<GroupClientAndGroupUser>(this.attach_GroupClientAndGroupUsers), new Action<GroupClientAndGroupUser>(this.detach_GroupClientAndGroupUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(120)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupClient_Client", Storage="_Clients", ThisKey="GroupName", OtherKey="GroupClientName")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupClient_GroupClientAndGroupUser", Storage="_GroupClientAndGroupUsers", ThisKey="GroupName", OtherKey="GroupClientName")]
		public EntitySet<GroupClientAndGroupUser> GroupClientAndGroupUsers
		{
			get
			{
				return this._GroupClientAndGroupUsers;
			}
			set
			{
				this._GroupClientAndGroupUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.GroupClient = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.GroupClient = null;
		}
		
		private void attach_GroupClientAndGroupUsers(GroupClientAndGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupClient = this;
		}
		
		private void detach_GroupClientAndGroupUsers(GroupClientAndGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupClient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupClientAndGroupUser")]
	public partial class GroupClientAndGroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupUserName;
		
		private string _GroupClientName;
		
		private System.Nullable<double> _GiaDichVu;
		
		private EntityRef<GroupClient> _GroupClient;
		
		private EntityRef<GroupUser> _GroupUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupUserNameChanging(string value);
    partial void OnGroupUserNameChanged();
    partial void OnGroupClientNameChanging(string value);
    partial void OnGroupClientNameChanged();
    partial void OnGiaDichVuChanging(System.Nullable<double> value);
    partial void OnGiaDichVuChanged();
    #endregion
		
		public GroupClientAndGroupUser()
		{
			this._GroupClient = default(EntityRef<GroupClient>);
			this._GroupUser = default(EntityRef<GroupUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUserName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupUserName
		{
			get
			{
				return this._GroupUserName;
			}
			set
			{
				if ((this._GroupUserName != value))
				{
					if (this._GroupUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserNameChanging(value);
					this.SendPropertyChanging();
					this._GroupUserName = value;
					this.SendPropertyChanged("GroupUserName");
					this.OnGroupUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupClientName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupClientName
		{
			get
			{
				return this._GroupClientName;
			}
			set
			{
				if ((this._GroupClientName != value))
				{
					if (this._GroupClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupClientNameChanging(value);
					this.SendPropertyChanging();
					this._GroupClientName = value;
					this.SendPropertyChanged("GroupClientName");
					this.OnGroupClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiaDichVu", DbType="Float")]
		public System.Nullable<double> GiaDichVu
		{
			get
			{
				return this._GiaDichVu;
			}
			set
			{
				if ((this._GiaDichVu != value))
				{
					this.OnGiaDichVuChanging(value);
					this.SendPropertyChanging();
					this._GiaDichVu = value;
					this.SendPropertyChanged("GiaDichVu");
					this.OnGiaDichVuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupClient_GroupClientAndGroupUser", Storage="_GroupClient", ThisKey="GroupClientName", OtherKey="GroupName", IsForeignKey=true)]
		public GroupClient GroupClient
		{
			get
			{
				return this._GroupClient.Entity;
			}
			set
			{
				GroupClient previousValue = this._GroupClient.Entity;
				if (((previousValue != value) 
							|| (this._GroupClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupClient.Entity = null;
						previousValue.GroupClientAndGroupUsers.Remove(this);
					}
					this._GroupClient.Entity = value;
					if ((value != null))
					{
						value.GroupClientAndGroupUsers.Add(this);
						this._GroupClientName = value.GroupName;
					}
					else
					{
						this._GroupClientName = default(string);
					}
					this.SendPropertyChanged("GroupClient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_GroupClientAndGroupUser", Storage="_GroupUser", ThisKey="GroupUserName", OtherKey="GroupName", IsForeignKey=true)]
		public GroupUser GroupUser
		{
			get
			{
				return this._GroupUser.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser.Entity = null;
						previousValue.GroupClientAndGroupUsers.Remove(this);
					}
					this._GroupUser.Entity = value;
					if ((value != null))
					{
						value.GroupClientAndGroupUsers.Add(this);
						this._GroupUserName = value.GroupName;
					}
					else
					{
						this._GroupUserName = default(string);
					}
					this.SendPropertyChanged("GroupUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupUser")]
	public partial class GroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupName;
		
		private string _TypeName;
		
		private EntitySet<GroupClientAndGroupUser> _GroupClientAndGroupUsers;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<TheUser> _TheUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public GroupUser()
		{
			this._GroupClientAndGroupUsers = new EntitySet<GroupClientAndGroupUser>(new Action<GroupClientAndGroupUser>(this.attach_GroupClientAndGroupUsers), new Action<GroupClientAndGroupUser>(this.detach_GroupClientAndGroupUsers));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._TheUsers = new EntitySet<TheUser>(new Action<TheUser>(this.attach_TheUsers), new Action<TheUser>(this.detach_TheUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(30)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_GroupClientAndGroupUser", Storage="_GroupClientAndGroupUsers", ThisKey="GroupName", OtherKey="GroupUserName")]
		public EntitySet<GroupClientAndGroupUser> GroupClientAndGroupUsers
		{
			get
			{
				return this._GroupClientAndGroupUsers;
			}
			set
			{
				this._GroupClientAndGroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_Member", Storage="_Members", ThisKey="GroupName", OtherKey="GroupUser")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_TheUser", Storage="_TheUsers", ThisKey="GroupName", OtherKey="GroupUser")]
		public EntitySet<TheUser> TheUsers
		{
			get
			{
				return this._TheUsers;
			}
			set
			{
				this._TheUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupClientAndGroupUsers(GroupClientAndGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = this;
		}
		
		private void detach_GroupClientAndGroupUsers(GroupClientAndGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser1 = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser1 = null;
		}
		
		private void attach_TheUsers(TheUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser1 = this;
		}
		
		private void detach_TheUsers(TheUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LINHVUC")]
	public partial class LINHVUC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MALINHVUC;
		
		private string _TENLINHVUC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMALINHVUCChanging(string value);
    partial void OnMALINHVUCChanged();
    partial void OnTENLINHVUCChanging(string value);
    partial void OnTENLINHVUCChanged();
    #endregion
		
		public LINHVUC()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALINHVUC", DbType="NVarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALINHVUC
		{
			get
			{
				return this._MALINHVUC;
			}
			set
			{
				if ((this._MALINHVUC != value))
				{
					this.OnMALINHVUCChanging(value);
					this.SendPropertyChanging();
					this._MALINHVUC = value;
					this.SendPropertyChanged("MALINHVUC");
					this.OnMALINHVUCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLINHVUC", DbType="NVarChar(20)")]
		public string TENLINHVUC
		{
			get
			{
				return this._TENLINHVUC;
			}
			set
			{
				if ((this._TENLINHVUC != value))
				{
					this.OnTENLINHVUCChanging(value);
					this.SendPropertyChanging();
					this._TENLINHVUC = value;
					this.SendPropertyChanged("TENLINHVUC");
					this.OnTENLINHVUCChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOAIGAME")]
	public partial class LOAIGAME : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MALOAIGAME;
		
		private string _TENLOAIGAME;
		
		private string _MOTALOAIGAME;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMALOAIGAMEChanging(string value);
    partial void OnMALOAIGAMEChanged();
    partial void OnTENLOAIGAMEChanging(string value);
    partial void OnTENLOAIGAMEChanged();
    partial void OnMOTALOAIGAMEChanging(string value);
    partial void OnMOTALOAIGAMEChanged();
    #endregion
		
		public LOAIGAME()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOAIGAME", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALOAIGAME
		{
			get
			{
				return this._MALOAIGAME;
			}
			set
			{
				if ((this._MALOAIGAME != value))
				{
					this.OnMALOAIGAMEChanging(value);
					this.SendPropertyChanging();
					this._MALOAIGAME = value;
					this.SendPropertyChanged("MALOAIGAME");
					this.OnMALOAIGAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLOAIGAME", DbType="NVarChar(50)")]
		public string TENLOAIGAME
		{
			get
			{
				return this._TENLOAIGAME;
			}
			set
			{
				if ((this._TENLOAIGAME != value))
				{
					this.OnTENLOAIGAMEChanging(value);
					this.SendPropertyChanging();
					this._TENLOAIGAME = value;
					this.SendPropertyChanged("TENLOAIGAME");
					this.OnTENLOAIGAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOTALOAIGAME", DbType="NVarChar(90)")]
		public string MOTALOAIGAME
		{
			get
			{
				return this._MOTALOAIGAME;
			}
			set
			{
				if ((this._MOTALOAIGAME != value))
				{
					this.OnMOTALOAIGAMEChanging(value);
					this.SendPropertyChanging();
					this._MOTALOAIGAME = value;
					this.SendPropertyChanged("MOTALOAIGAME");
					this.OnMOTALOAIGAMEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOAITHE")]
	public partial class LOAITHE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MATHE;
		
		private System.Nullable<long> _MENHGIA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMATHEChanging(string value);
    partial void OnMATHEChanged();
    partial void OnMENHGIAChanging(System.Nullable<long> value);
    partial void OnMENHGIAChanged();
    #endregion
		
		public LOAITHE()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MATHE", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MATHE
		{
			get
			{
				return this._MATHE;
			}
			set
			{
				if ((this._MATHE != value))
				{
					this.OnMATHEChanging(value);
					this.SendPropertyChanging();
					this._MATHE = value;
					this.SendPropertyChanged("MATHE");
					this.OnMATHEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MENHGIA", DbType="BigInt")]
		public System.Nullable<long> MENHGIA
		{
			get
			{
				return this._MENHGIA;
			}
			set
			{
				if ((this._MENHGIA != value))
				{
					this.OnMENHGIAChanging(value);
					this.SendPropertyChanging();
					this._MENHGIA = value;
					this.SendPropertyChanged("MENHGIA");
					this.OnMENHGIAChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginMember")]
	public partial class LoginMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _memberID;
		
		private string _ClientName;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _UseTime;
		
		private System.Nullable<System.TimeSpan> _LeftTime;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemberIDChanging(int value);
    partial void OnmemberIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnUseTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnUseTimeChanged();
    partial void OnLeftTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnLeftTimeChanged();
    #endregion
		
		public LoginMember()
		{
			this._Client = default(EntityRef<Client>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int memberID
		{
			get
			{
				return this._memberID;
			}
			set
			{
				if ((this._memberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberIDChanging(value);
					this.SendPropertyChanging();
					this._memberID = value;
					this.SendPropertyChanged("memberID");
					this.OnmemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> UseTime
		{
			get
			{
				return this._UseTime;
			}
			set
			{
				if ((this._UseTime != value))
				{
					this.OnUseTimeChanging(value);
					this.SendPropertyChanging();
					this._UseTime = value;
					this.SendPropertyChanged("UseTime");
					this.OnUseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> LeftTime
		{
			get
			{
				return this._LeftTime;
			}
			set
			{
				if ((this._LeftTime != value))
				{
					this.OnLeftTimeChanging(value);
					this.SendPropertyChanging();
					this._LeftTime = value;
					this.SendPropertyChanged("LeftTime");
					this.OnLeftTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_LoginMember", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.LoginMembers.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.LoginMembers.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_LoginMember", Storage="_Member", ThisKey="memberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.LoginMembers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.LoginMembers.Add(this);
						this._memberID = value.MemberID;
					}
					else
					{
						this._memberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LUONG")]
	public partial class LUONG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MATV;
		
		private short _THANG;
		
		private long _LUONG1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMATVChanging(string value);
    partial void OnMATVChanged();
    partial void OnTHANGChanging(short value);
    partial void OnTHANGChanged();
    partial void OnLUONG1Changing(long value);
    partial void OnLUONG1Changed();
    #endregion
		
		public LUONG()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MATV", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MATV
		{
			get
			{
				return this._MATV;
			}
			set
			{
				if ((this._MATV != value))
				{
					this.OnMATVChanging(value);
					this.SendPropertyChanging();
					this._MATV = value;
					this.SendPropertyChanged("MATV");
					this.OnMATVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THANG", DbType="SmallInt NOT NULL")]
		public short THANG
		{
			get
			{
				return this._THANG;
			}
			set
			{
				if ((this._THANG != value))
				{
					this.OnTHANGChanging(value);
					this.SendPropertyChanging();
					this._THANG = value;
					this.SendPropertyChanged("THANG");
					this.OnTHANGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="LUONG", Storage="_LUONG1", DbType="BigInt NOT NULL")]
		public long LUONG1
		{
			get
			{
				return this._LUONG1;
			}
			set
			{
				if ((this._LUONG1 != value))
				{
					this.OnLUONG1Changing(value);
					this.SendPropertyChanging();
					this._LUONG1 = value;
					this.SendPropertyChanged("LUONG1");
					this.OnLUONG1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _AccountName;
		
		private string _Password;
		
		private string _GroupUser;
		
		private System.Nullable<System.TimeSpan> _CurrentTime;
		
		private System.Nullable<double> _CurrentMoney;
		
		private string _StatusAccount;
		
		private EntitySet<LoginMember> _LoginMembers;
		
		private EntityRef<MemberInformation> _MemberInformation;
		
		private EntityRef<GroupUser> _GroupUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGroupUserChanging(string value);
    partial void OnGroupUserChanged();
    partial void OnCurrentTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnCurrentTimeChanged();
    partial void OnCurrentMoneyChanging(System.Nullable<double> value);
    partial void OnCurrentMoneyChanged();
    partial void OnStatusAccountChanging(string value);
    partial void OnStatusAccountChanged();
    #endregion
		
		public Member()
		{
			this._LoginMembers = new EntitySet<LoginMember>(new Action<LoginMember>(this.attach_LoginMembers), new Action<LoginMember>(this.detach_LoginMembers));
			this._MemberInformation = default(EntityRef<MemberInformation>);
			this._GroupUser1 = default(EntityRef<GroupUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="VarChar(30)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUser", DbType="NVarChar(30)")]
		public string GroupUser
		{
			get
			{
				return this._GroupUser;
			}
			set
			{
				if ((this._GroupUser != value))
				{
					if (this._GroupUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserChanging(value);
					this.SendPropertyChanging();
					this._GroupUser = value;
					this.SendPropertyChanged("GroupUser");
					this.OnGroupUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> CurrentTime
		{
			get
			{
				return this._CurrentTime;
			}
			set
			{
				if ((this._CurrentTime != value))
				{
					this.OnCurrentTimeChanging(value);
					this.SendPropertyChanging();
					this._CurrentTime = value;
					this.SendPropertyChanged("CurrentTime");
					this.OnCurrentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentMoney", DbType="Float")]
		public System.Nullable<double> CurrentMoney
		{
			get
			{
				return this._CurrentMoney;
			}
			set
			{
				if ((this._CurrentMoney != value))
				{
					this.OnCurrentMoneyChanging(value);
					this.SendPropertyChanging();
					this._CurrentMoney = value;
					this.SendPropertyChanged("CurrentMoney");
					this.OnCurrentMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusAccount", DbType="NVarChar(30)")]
		public string StatusAccount
		{
			get
			{
				return this._StatusAccount;
			}
			set
			{
				if ((this._StatusAccount != value))
				{
					this.OnStatusAccountChanging(value);
					this.SendPropertyChanging();
					this._StatusAccount = value;
					this.SendPropertyChanged("StatusAccount");
					this.OnStatusAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_LoginMember", Storage="_LoginMembers", ThisKey="MemberID", OtherKey="memberID")]
		public EntitySet<LoginMember> LoginMembers
		{
			get
			{
				return this._LoginMembers;
			}
			set
			{
				this._LoginMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberInformation", Storage="_MemberInformation", ThisKey="MemberID", OtherKey="memberID", IsUnique=true, IsForeignKey=false)]
		public MemberInformation MemberInformation
		{
			get
			{
				return this._MemberInformation.Entity;
			}
			set
			{
				MemberInformation previousValue = this._MemberInformation.Entity;
				if (((previousValue != value) 
							|| (this._MemberInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberInformation.Entity = null;
						previousValue.Member = null;
					}
					this._MemberInformation.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("MemberInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_Member", Storage="_GroupUser1", ThisKey="GroupUser", OtherKey="GroupName", IsForeignKey=true)]
		public GroupUser GroupUser1
		{
			get
			{
				return this._GroupUser1.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser1.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser1.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._GroupUser1.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._GroupUser = value.GroupName;
					}
					else
					{
						this._GroupUser = default(string);
					}
					this.SendPropertyChanged("GroupUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoginMembers(LoginMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_LoginMembers(LoginMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberInformation")]
	public partial class MemberInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _memberID;
		
		private string _MemberName;
		
		private System.Nullable<System.DateTime> _FoundedDate;
		
		private string _PhoneNumber;
		
		private string _MemberAddress;
		
		private string _Email;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemberIDChanging(int value);
    partial void OnmemberIDChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnFoundedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFoundedDateChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnMemberAddressChanging(string value);
    partial void OnMemberAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public MemberInformation()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int memberID
		{
			get
			{
				return this._memberID;
			}
			set
			{
				if ((this._memberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberIDChanging(value);
					this.SendPropertyChanging();
					this._memberID = value;
					this.SendPropertyChanged("memberID");
					this.OnmemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="NVarChar(100)")]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this.OnMemberNameChanging(value);
					this.SendPropertyChanging();
					this._MemberName = value;
					this.SendPropertyChanged("MemberName");
					this.OnMemberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundedDate", DbType="Date")]
		public System.Nullable<System.DateTime> FoundedDate
		{
			get
			{
				return this._FoundedDate;
			}
			set
			{
				if ((this._FoundedDate != value))
				{
					this.OnFoundedDateChanging(value);
					this.SendPropertyChanging();
					this._FoundedDate = value;
					this.SendPropertyChanged("FoundedDate");
					this.OnFoundedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberAddress", DbType="NVarChar(100)")]
		public string MemberAddress
		{
			get
			{
				return this._MemberAddress;
			}
			set
			{
				if ((this._MemberAddress != value))
				{
					this.OnMemberAddressChanging(value);
					this.SendPropertyChanging();
					this._MemberAddress = value;
					this.SendPropertyChanged("MemberAddress");
					this.OnMemberAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberInformation", Storage="_Member", ThisKey="memberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.MemberInformation = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.MemberInformation = this;
						this._memberID = value.MemberID;
					}
					else
					{
						this._memberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NGUOIDUNG")]
	public partial class NGUOIDUNG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _TENNGUOIDUNG;
		
		private string _MATKHAU;
		
		private System.Nullable<short> _QUYEN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnTENNGUOIDUNGChanging(string value);
    partial void OnTENNGUOIDUNGChanged();
    partial void OnMATKHAUChanging(string value);
    partial void OnMATKHAUChanged();
    partial void OnQUYENChanging(System.Nullable<short> value);
    partial void OnQUYENChanged();
    #endregion
		
		public NGUOIDUNG()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENNGUOIDUNG", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TENNGUOIDUNG
		{
			get
			{
				return this._TENNGUOIDUNG;
			}
			set
			{
				if ((this._TENNGUOIDUNG != value))
				{
					this.OnTENNGUOIDUNGChanging(value);
					this.SendPropertyChanging();
					this._TENNGUOIDUNG = value;
					this.SendPropertyChanged("TENNGUOIDUNG");
					this.OnTENNGUOIDUNGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MATKHAU", DbType="NVarChar(50)")]
		public string MATKHAU
		{
			get
			{
				return this._MATKHAU;
			}
			set
			{
				if ((this._MATKHAU != value))
				{
					this.OnMATKHAUChanging(value);
					this.SendPropertyChanging();
					this._MATKHAU = value;
					this.SendPropertyChanged("MATKHAU");
					this.OnMATKHAUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUYEN", DbType="SmallInt")]
		public System.Nullable<short> QUYEN
		{
			get
			{
				return this._QUYEN;
			}
			set
			{
				if ((this._QUYEN != value))
				{
					this.OnQUYENChanging(value);
					this.SendPropertyChanging();
					this._QUYEN = value;
					this.SendPropertyChanged("QUYEN");
					this.OnQUYENChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderCard")]
	public partial class OrderCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _CardID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _PriceTotal;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<TheCard> _TheCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnCardIDChanging(int value);
    partial void OnCardIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceTotalChanging(System.Nullable<double> value);
    partial void OnPriceTotalChanged();
    #endregion
		
		public OrderCard()
		{
			this._Client = default(EntityRef<Client>);
			this._TheCard = default(EntityRef<TheCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					if (this._TheCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTotal", DbType="Float")]
		public System.Nullable<double> PriceTotal
		{
			get
			{
				return this._PriceTotal;
			}
			set
			{
				if ((this._PriceTotal != value))
				{
					this.OnPriceTotalChanging(value);
					this.SendPropertyChanging();
					this._PriceTotal = value;
					this.SendPropertyChanged("PriceTotal");
					this.OnPriceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderCard", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.OrderCards.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.OrderCards.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheCard_OrderCard", Storage="_TheCard", ThisKey="CardID", OtherKey="CardID", IsForeignKey=true)]
		public TheCard TheCard
		{
			get
			{
				return this._TheCard.Entity;
			}
			set
			{
				TheCard previousValue = this._TheCard.Entity;
				if (((previousValue != value) 
							|| (this._TheCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TheCard.Entity = null;
						previousValue.OrderCards.Remove(this);
					}
					this._TheCard.Entity = value;
					if ((value != null))
					{
						value.OrderCards.Add(this);
						this._CardID = value.CardID;
					}
					else
					{
						this._CardID = default(int);
					}
					this.SendPropertyChanged("TheCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDrink")]
	public partial class OrderDrink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _DrinkID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _PriceTotal;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Drink> _Drink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnDrinkIDChanging(int value);
    partial void OnDrinkIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceTotalChanging(System.Nullable<double> value);
    partial void OnPriceTotalChanged();
    #endregion
		
		public OrderDrink()
		{
			this._Client = default(EntityRef<Client>);
			this._Drink = default(EntityRef<Drink>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrinkID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DrinkID
		{
			get
			{
				return this._DrinkID;
			}
			set
			{
				if ((this._DrinkID != value))
				{
					if (this._Drink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDrinkIDChanging(value);
					this.SendPropertyChanging();
					this._DrinkID = value;
					this.SendPropertyChanged("DrinkID");
					this.OnDrinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTotal", DbType="Float")]
		public System.Nullable<double> PriceTotal
		{
			get
			{
				return this._PriceTotal;
			}
			set
			{
				if ((this._PriceTotal != value))
				{
					this.OnPriceTotalChanging(value);
					this.SendPropertyChanging();
					this._PriceTotal = value;
					this.SendPropertyChanged("PriceTotal");
					this.OnPriceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderDrink", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.OrderDrinks.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.OrderDrinks.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_OrderDrink", Storage="_Drink", ThisKey="DrinkID", OtherKey="DrinkID", IsForeignKey=true)]
		public Drink Drink
		{
			get
			{
				return this._Drink.Entity;
			}
			set
			{
				Drink previousValue = this._Drink.Entity;
				if (((previousValue != value) 
							|| (this._Drink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drink.Entity = null;
						previousValue.OrderDrinks.Remove(this);
					}
					this._Drink.Entity = value;
					if ((value != null))
					{
						value.OrderDrinks.Add(this);
						this._DrinkID = value.DrinkID;
					}
					else
					{
						this._DrinkID = default(int);
					}
					this.SendPropertyChanged("Drink");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderFood")]
	public partial class OrderFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClientName;
		
		private int _FoodID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _PriceTotal;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Food> _Food;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnFoodIDChanging(int value);
    partial void OnFoodIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceTotalChanging(System.Nullable<double> value);
    partial void OnPriceTotalChanged();
    #endregion
		
		public OrderFood()
		{
			this._Client = default(EntityRef<Client>);
			this._Food = default(EntityRef<Food>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodIDChanging(value);
					this.SendPropertyChanging();
					this._FoodID = value;
					this.SendPropertyChanged("FoodID");
					this.OnFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTotal", DbType="Float")]
		public System.Nullable<double> PriceTotal
		{
			get
			{
				return this._PriceTotal;
			}
			set
			{
				if ((this._PriceTotal != value))
				{
					this.OnPriceTotalChanging(value);
					this.SendPropertyChanging();
					this._PriceTotal = value;
					this.SendPropertyChanged("PriceTotal");
					this.OnPriceTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_OrderFood", Storage="_Client", ThisKey="ClientName", OtherKey="ClientName", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.OrderFoods.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.OrderFoods.Add(this);
						this._ClientName = value.ClientName;
					}
					else
					{
						this._ClientName = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_OrderFood", Storage="_Food", ThisKey="FoodID", OtherKey="FoodID", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.OrderFoods.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.OrderFoods.Add(this);
						this._FoodID = value.FoodID;
					}
					else
					{
						this._FoodID = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.THAMSO")]
	public partial class THAMSO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _THANG;
		
		private System.Nullable<long> _MUCNANGDONG;
		
		private System.Nullable<double> _PHANTRAM1;
		
		private System.Nullable<double> _PHAMTRAM2;
		
		private System.Nullable<long> _MUCDANHHIEU;
		
		private System.Nullable<long> _MENHGIA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTHANGChanging(short value);
    partial void OnTHANGChanged();
    partial void OnMUCNANGDONGChanging(System.Nullable<long> value);
    partial void OnMUCNANGDONGChanged();
    partial void OnPHANTRAM1Changing(System.Nullable<double> value);
    partial void OnPHANTRAM1Changed();
    partial void OnPHAMTRAM2Changing(System.Nullable<double> value);
    partial void OnPHAMTRAM2Changed();
    partial void OnMUCDANHHIEUChanging(System.Nullable<long> value);
    partial void OnMUCDANHHIEUChanged();
    partial void OnMENHGIAChanging(System.Nullable<long> value);
    partial void OnMENHGIAChanged();
    #endregion
		
		public THAMSO()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THANG", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short THANG
		{
			get
			{
				return this._THANG;
			}
			set
			{
				if ((this._THANG != value))
				{
					this.OnTHANGChanging(value);
					this.SendPropertyChanging();
					this._THANG = value;
					this.SendPropertyChanged("THANG");
					this.OnTHANGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MUCNANGDONG", DbType="BigInt")]
		public System.Nullable<long> MUCNANGDONG
		{
			get
			{
				return this._MUCNANGDONG;
			}
			set
			{
				if ((this._MUCNANGDONG != value))
				{
					this.OnMUCNANGDONGChanging(value);
					this.SendPropertyChanging();
					this._MUCNANGDONG = value;
					this.SendPropertyChanged("MUCNANGDONG");
					this.OnMUCNANGDONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHANTRAM1", DbType="Float")]
		public System.Nullable<double> PHANTRAM1
		{
			get
			{
				return this._PHANTRAM1;
			}
			set
			{
				if ((this._PHANTRAM1 != value))
				{
					this.OnPHANTRAM1Changing(value);
					this.SendPropertyChanging();
					this._PHANTRAM1 = value;
					this.SendPropertyChanged("PHANTRAM1");
					this.OnPHANTRAM1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHAMTRAM2", DbType="Float")]
		public System.Nullable<double> PHAMTRAM2
		{
			get
			{
				return this._PHAMTRAM2;
			}
			set
			{
				if ((this._PHAMTRAM2 != value))
				{
					this.OnPHAMTRAM2Changing(value);
					this.SendPropertyChanging();
					this._PHAMTRAM2 = value;
					this.SendPropertyChanged("PHAMTRAM2");
					this.OnPHAMTRAM2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MUCDANHHIEU", DbType="BigInt")]
		public System.Nullable<long> MUCDANHHIEU
		{
			get
			{
				return this._MUCDANHHIEU;
			}
			set
			{
				if ((this._MUCDANHHIEU != value))
				{
					this.OnMUCDANHHIEUChanging(value);
					this.SendPropertyChanging();
					this._MUCDANHHIEU = value;
					this.SendPropertyChanged("MUCDANHHIEU");
					this.OnMUCDANHHIEUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MENHGIA", DbType="BigInt")]
		public System.Nullable<long> MENHGIA
		{
			get
			{
				return this._MENHGIA;
			}
			set
			{
				if ((this._MENHGIA != value))
				{
					this.OnMENHGIAChanging(value);
					this.SendPropertyChanging();
					this._MENHGIA = value;
					this.SendPropertyChanged("MENHGIA");
					this.OnMENHGIAChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.THANHVIEN")]
	public partial class THANHVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MATV;
		
		private string _HOTEN;
		
		private System.Nullable<System.DateTime> _NGAYSINH;
		
		private string _DIACHI;
		
		private string _DIENTHOAI;
		
		private System.Nullable<int> _NGUOIGIOITHIEU;
		
		private System.Nullable<long> _SOTIENTHAMGIA;
		
		private System.Nullable<bool> _DANHHIEU;
		
		private string _LOAIGAME;
		
		private string _DOITUONG;
		
		private string _GIADINH;
		
		private string _THUNHAP;
		
		private string _BANBE;
		
		private string _GIAOTIEP;
		
		private string _TRAIGAI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMATVChanging(string value);
    partial void OnMATVChanged();
    partial void OnHOTENChanging(string value);
    partial void OnHOTENChanged();
    partial void OnNGAYSINHChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYSINHChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnDIENTHOAIChanging(string value);
    partial void OnDIENTHOAIChanged();
    partial void OnNGUOIGIOITHIEUChanging(System.Nullable<int> value);
    partial void OnNGUOIGIOITHIEUChanged();
    partial void OnSOTIENTHAMGIAChanging(System.Nullable<long> value);
    partial void OnSOTIENTHAMGIAChanged();
    partial void OnDANHHIEUChanging(System.Nullable<bool> value);
    partial void OnDANHHIEUChanged();
    partial void OnLOAIGAMEChanging(string value);
    partial void OnLOAIGAMEChanged();
    partial void OnDOITUONGChanging(string value);
    partial void OnDOITUONGChanged();
    partial void OnGIADINHChanging(string value);
    partial void OnGIADINHChanged();
    partial void OnTHUNHAPChanging(string value);
    partial void OnTHUNHAPChanged();
    partial void OnBANBEChanging(string value);
    partial void OnBANBEChanged();
    partial void OnGIAOTIEPChanging(string value);
    partial void OnGIAOTIEPChanged();
    partial void OnTRAIGAIChanging(string value);
    partial void OnTRAIGAIChanged();
    #endregion
		
		public THANHVIEN()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MATV", DbType="NVarChar(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MATV
		{
			get
			{
				return this._MATV;
			}
			set
			{
				if ((this._MATV != value))
				{
					this.OnMATVChanging(value);
					this.SendPropertyChanging();
					this._MATV = value;
					this.SendPropertyChanged("MATV");
					this.OnMATVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOTEN", DbType="NVarChar(50)")]
		public string HOTEN
		{
			get
			{
				return this._HOTEN;
			}
			set
			{
				if ((this._HOTEN != value))
				{
					this.OnHOTENChanging(value);
					this.SendPropertyChanging();
					this._HOTEN = value;
					this.SendPropertyChanged("HOTEN");
					this.OnHOTENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="DateTime")]
		public System.Nullable<System.DateTime> NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="NVarChar(50)")]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIENTHOAI", DbType="VarChar(10)")]
		public string DIENTHOAI
		{
			get
			{
				return this._DIENTHOAI;
			}
			set
			{
				if ((this._DIENTHOAI != value))
				{
					this.OnDIENTHOAIChanging(value);
					this.SendPropertyChanging();
					this._DIENTHOAI = value;
					this.SendPropertyChanged("DIENTHOAI");
					this.OnDIENTHOAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGUOIGIOITHIEU", DbType="Int")]
		public System.Nullable<int> NGUOIGIOITHIEU
		{
			get
			{
				return this._NGUOIGIOITHIEU;
			}
			set
			{
				if ((this._NGUOIGIOITHIEU != value))
				{
					this.OnNGUOIGIOITHIEUChanging(value);
					this.SendPropertyChanging();
					this._NGUOIGIOITHIEU = value;
					this.SendPropertyChanged("NGUOIGIOITHIEU");
					this.OnNGUOIGIOITHIEUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOTIENTHAMGIA", DbType="BigInt")]
		public System.Nullable<long> SOTIENTHAMGIA
		{
			get
			{
				return this._SOTIENTHAMGIA;
			}
			set
			{
				if ((this._SOTIENTHAMGIA != value))
				{
					this.OnSOTIENTHAMGIAChanging(value);
					this.SendPropertyChanging();
					this._SOTIENTHAMGIA = value;
					this.SendPropertyChanged("SOTIENTHAMGIA");
					this.OnSOTIENTHAMGIAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DANHHIEU", DbType="Bit")]
		public System.Nullable<bool> DANHHIEU
		{
			get
			{
				return this._DANHHIEU;
			}
			set
			{
				if ((this._DANHHIEU != value))
				{
					this.OnDANHHIEUChanging(value);
					this.SendPropertyChanging();
					this._DANHHIEU = value;
					this.SendPropertyChanged("DANHHIEU");
					this.OnDANHHIEUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOAIGAME", DbType="NVarChar(5)")]
		public string LOAIGAME
		{
			get
			{
				return this._LOAIGAME;
			}
			set
			{
				if ((this._LOAIGAME != value))
				{
					this.OnLOAIGAMEChanging(value);
					this.SendPropertyChanging();
					this._LOAIGAME = value;
					this.SendPropertyChanged("LOAIGAME");
					this.OnLOAIGAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOITUONG", DbType="NVarChar(5)")]
		public string DOITUONG
		{
			get
			{
				return this._DOITUONG;
			}
			set
			{
				if ((this._DOITUONG != value))
				{
					this.OnDOITUONGChanging(value);
					this.SendPropertyChanging();
					this._DOITUONG = value;
					this.SendPropertyChanged("DOITUONG");
					this.OnDOITUONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIADINH", DbType="NVarChar(5)")]
		public string GIADINH
		{
			get
			{
				return this._GIADINH;
			}
			set
			{
				if ((this._GIADINH != value))
				{
					this.OnGIADINHChanging(value);
					this.SendPropertyChanging();
					this._GIADINH = value;
					this.SendPropertyChanged("GIADINH");
					this.OnGIADINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THUNHAP", DbType="NVarChar(5)")]
		public string THUNHAP
		{
			get
			{
				return this._THUNHAP;
			}
			set
			{
				if ((this._THUNHAP != value))
				{
					this.OnTHUNHAPChanging(value);
					this.SendPropertyChanging();
					this._THUNHAP = value;
					this.SendPropertyChanged("THUNHAP");
					this.OnTHUNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BANBE", DbType="NVarChar(5)")]
		public string BANBE
		{
			get
			{
				return this._BANBE;
			}
			set
			{
				if ((this._BANBE != value))
				{
					this.OnBANBEChanging(value);
					this.SendPropertyChanging();
					this._BANBE = value;
					this.SendPropertyChanged("BANBE");
					this.OnBANBEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIAOTIEP", DbType="NVarChar(5)")]
		public string GIAOTIEP
		{
			get
			{
				return this._GIAOTIEP;
			}
			set
			{
				if ((this._GIAOTIEP != value))
				{
					this.OnGIAOTIEPChanging(value);
					this.SendPropertyChanging();
					this._GIAOTIEP = value;
					this.SendPropertyChanged("GIAOTIEP");
					this.OnGIAOTIEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRAIGAI", DbType="NVarChar(5)")]
		public string TRAIGAI
		{
			get
			{
				return this._TRAIGAI;
			}
			set
			{
				if ((this._TRAIGAI != value))
				{
					this.OnTRAIGAIChanging(value);
					this.SendPropertyChanging();
					this._TRAIGAI = value;
					this.SendPropertyChanged("TRAIGAI");
					this.OnTRAIGAIChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TheCard")]
	public partial class TheCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardID;
		
		private string _CardName;
		
		private string _CategoryName;
		
		private System.Nullable<double> _PriceUnit;
		
		private string _UnitLot;
		
		private System.Nullable<int> _InventoryNumber;
		
		private EntitySet<OrderCard> _OrderCards;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardIDChanging(int value);
    partial void OnCardIDChanged();
    partial void OnCardNameChanging(string value);
    partial void OnCardNameChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnPriceUnitChanging(System.Nullable<double> value);
    partial void OnPriceUnitChanged();
    partial void OnUnitLotChanging(string value);
    partial void OnUnitLotChanged();
    partial void OnInventoryNumberChanging(System.Nullable<int> value);
    partial void OnInventoryNumberChanged();
    #endregion
		
		public TheCard()
		{
			this._OrderCards = new EntitySet<OrderCard>(new Action<OrderCard>(this.attach_OrderCards), new Action<OrderCard>(this.detach_OrderCards));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardName", DbType="NVarChar(100)")]
		public string CardName
		{
			get
			{
				return this._CardName;
			}
			set
			{
				if ((this._CardName != value))
				{
					this.OnCardNameChanging(value);
					this.SendPropertyChanging();
					this._CardName = value;
					this.SendPropertyChanged("CardName");
					this.OnCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(60)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceUnit", DbType="Float")]
		public System.Nullable<double> PriceUnit
		{
			get
			{
				return this._PriceUnit;
			}
			set
			{
				if ((this._PriceUnit != value))
				{
					this.OnPriceUnitChanging(value);
					this.SendPropertyChanging();
					this._PriceUnit = value;
					this.SendPropertyChanged("PriceUnit");
					this.OnPriceUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitLot", DbType="NVarChar(100)")]
		public string UnitLot
		{
			get
			{
				return this._UnitLot;
			}
			set
			{
				if ((this._UnitLot != value))
				{
					this.OnUnitLotChanging(value);
					this.SendPropertyChanging();
					this._UnitLot = value;
					this.SendPropertyChanged("UnitLot");
					this.OnUnitLotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryNumber", DbType="Int")]
		public System.Nullable<int> InventoryNumber
		{
			get
			{
				return this._InventoryNumber;
			}
			set
			{
				if ((this._InventoryNumber != value))
				{
					this.OnInventoryNumberChanging(value);
					this.SendPropertyChanging();
					this._InventoryNumber = value;
					this.SendPropertyChanged("InventoryNumber");
					this.OnInventoryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheCard_OrderCard", Storage="_OrderCards", ThisKey="CardID", OtherKey="CardID")]
		public EntitySet<OrderCard> OrderCards
		{
			get
			{
				return this._OrderCards;
			}
			set
			{
				this._OrderCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_TheCard", Storage="_Category", ThisKey="CategoryName", OtherKey="CategoryName", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.TheCards.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.TheCards.Add(this);
						this._CategoryName = value.CategoryName;
					}
					else
					{
						this._CategoryName = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderCards(OrderCard entity)
		{
			this.SendPropertyChanging();
			entity.TheCard = this;
		}
		
		private void detach_OrderCards(OrderCard entity)
		{
			this.SendPropertyChanging();
			entity.TheCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TheUser")]
	public partial class TheUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Type;
		
		private string _GroupUser;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private EntitySet<Bill> _Bills;
		
		private EntityRef<GroupUser> _GroupUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnGroupUserChanging(string value);
    partial void OnGroupUserChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public TheUser()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._GroupUser1 = default(EntityRef<GroupUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(60) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(30)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupUser", DbType="NVarChar(30)")]
		public string GroupUser
		{
			get
			{
				return this._GroupUser;
			}
			set
			{
				if ((this._GroupUser != value))
				{
					if (this._GroupUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserChanging(value);
					this.SendPropertyChanging();
					this._GroupUser = value;
					this.SendPropertyChanged("GroupUser");
					this.OnGroupUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TheUser_Bill", Storage="_Bills", ThisKey="UserName", OtherKey="FoundedUser")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupUser_TheUser", Storage="_GroupUser1", ThisKey="GroupUser", OtherKey="GroupName", IsForeignKey=true)]
		public GroupUser GroupUser1
		{
			get
			{
				return this._GroupUser1.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser1.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser1.Entity = null;
						previousValue.TheUsers.Remove(this);
					}
					this._GroupUser1.Entity = value;
					if ((value != null))
					{
						value.TheUsers.Add(this);
						this._GroupUser = value.GroupName;
					}
					else
					{
						this._GroupUser = default(string);
					}
					this.SendPropertyChanged("GroupUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.TheUser = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.TheUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.THUNHAP")]
	public partial class THUNHAP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MATHUNHAP;
		
		private string _TENTHUNHAP;
		
		private string _CHITIETTHUNHAP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMATHUNHAPChanging(string value);
    partial void OnMATHUNHAPChanged();
    partial void OnTENTHUNHAPChanging(string value);
    partial void OnTENTHUNHAPChanged();
    partial void OnCHITIETTHUNHAPChanging(string value);
    partial void OnCHITIETTHUNHAPChanged();
    #endregion
		
		public THUNHAP()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MATHUNHAP", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MATHUNHAP
		{
			get
			{
				return this._MATHUNHAP;
			}
			set
			{
				if ((this._MATHUNHAP != value))
				{
					this.OnMATHUNHAPChanging(value);
					this.SendPropertyChanging();
					this._MATHUNHAP = value;
					this.SendPropertyChanged("MATHUNHAP");
					this.OnMATHUNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENTHUNHAP", DbType="NVarChar(50)")]
		public string TENTHUNHAP
		{
			get
			{
				return this._TENTHUNHAP;
			}
			set
			{
				if ((this._TENTHUNHAP != value))
				{
					this.OnTENTHUNHAPChanging(value);
					this.SendPropertyChanging();
					this._TENTHUNHAP = value;
					this.SendPropertyChanged("TENTHUNHAP");
					this.OnTENTHUNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHITIETTHUNHAP", DbType="NVarChar(90)")]
		public string CHITIETTHUNHAP
		{
			get
			{
				return this._CHITIETTHUNHAP;
			}
			set
			{
				if ((this._CHITIETTHUNHAP != value))
				{
					this.OnCHITIETTHUNHAPChanging(value);
					this.SendPropertyChanging();
					this._CHITIETTHUNHAP = value;
					this.SendPropertyChanged("CHITIETTHUNHAP");
					this.OnCHITIETTHUNHAPChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRAIGAI")]
	public partial class TRAIGAI : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MATRAIGAI;
		
		private string _TENTRAIGAI;
		
		private string _CHITIETTRAIGAI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMATRAIGAIChanging(string value);
    partial void OnMATRAIGAIChanged();
    partial void OnTENTRAIGAIChanging(string value);
    partial void OnTENTRAIGAIChanged();
    partial void OnCHITIETTRAIGAIChanging(string value);
    partial void OnCHITIETTRAIGAIChanged();
    #endregion
		
		public TRAIGAI()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MATRAIGAI", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MATRAIGAI
		{
			get
			{
				return this._MATRAIGAI;
			}
			set
			{
				if ((this._MATRAIGAI != value))
				{
					this.OnMATRAIGAIChanging(value);
					this.SendPropertyChanging();
					this._MATRAIGAI = value;
					this.SendPropertyChanged("MATRAIGAI");
					this.OnMATRAIGAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENTRAIGAI", DbType="NVarChar(50)")]
		public string TENTRAIGAI
		{
			get
			{
				return this._TENTRAIGAI;
			}
			set
			{
				if ((this._TENTRAIGAI != value))
				{
					this.OnTENTRAIGAIChanging(value);
					this.SendPropertyChanging();
					this._TENTRAIGAI = value;
					this.SendPropertyChanged("TENTRAIGAI");
					this.OnTENTRAIGAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHITIETTRAIGAI", DbType="NVarChar(90)")]
		public string CHITIETTRAIGAI
		{
			get
			{
				return this._CHITIETTRAIGAI;
			}
			set
			{
				if ((this._CHITIETTRAIGAI != value))
				{
					this.OnCHITIETTRAIGAIChanging(value);
					this.SendPropertyChanging();
					this._CHITIETTRAIGAI = value;
					this.SendPropertyChanged("CHITIETTRAIGAI");
					this.OnCHITIETTRAIGAIChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
